package matrixFindANum_offer3;

/** 
 * 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。 
 * 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 
 *  
 * 规律：首先选取数组中右上角的数字。如果该数字等于要查找的数字，查找过程结束： 
 * 如果该数字大于要查找的数字，剔除这个数字所在的列：如果该数字小于要查找的数字，剔除这个数字所在的行。 
 * 也就是说如果要查找的数字不在数组的右上角，则每－次都在数组的查找范围中剔除）行或者一列，这样每一步都可以缩小 
 * 查找的范围，直到找到要查找的数字，或者查找范围为空。 
 * 
 * @param matrix 待查找的数组 
 * @param number 要查找的数 
 * @return 查找结果，true找到，false没有找到 
 */  
public class MatrixFindNum {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] matrix = {  
                {1, 2, 8, 9},  
                {2, 4, 9, 12},  
                {4, 7, 10, 13},  
                {6, 8, 11, 15}  
        };  
		System.out.print(find(matrix, 7));
		System.out.print(find(matrix, 5));
		System.out.print(find(matrix, 32));
	}
	public static boolean find(int[][] matrix, int num) {
		if (matrix == null || matrix.length < 1 || matrix[0].length < 1) {
			return false;
		}
		int rows = matrix.length;
		int cols = matrix[0].length;
		int row = 0;
		int col = rows - 1;
		while (row >= 0 && row < rows && col >= 0 && col < cols) {
			if (matrix[row][col] == num) { // 如果找到了就直接退出  
                return true;  
            } else if (matrix[row][col] > num) { // 如果找到的数比要找的数大，说明要找的数在当前数的左边  
                col--; // 列数减一，代表向左移动  
            } else { // 如果找到的数比要找的数小，说明要找的数在当前数的下边  
                row++; // 行数加一，代表向下移动  
            }  
        }  
        return false; 
	}

}
